LIB_H   = $(wildcard $(PATH_LIB)/*/*.h)
LIB_HPP = $(wildcard $(PATH_LIB)/*/*.hpp)
LIB_INL = $(wildcard $(PATH_LIB)/*/*.inl)
LIB_TML = $(wildcard $(PATH_LIB)/*/*.tml)
LIB_C   = $(wildcard $(PATH_LIB)/*/*.c)
LIB_CC  = $(wildcard $(PATH_LIB)/*/*.cc)
LIB_CPP = $(wildcard $(PATH_LIB)/*/*.cpp)
LIB_CXX = $(wildcard $(PATH_LIB)/*/*.cxx)

PATH_SRC_XTCORE = $(PATH_SRC)/xtcore

XTCORE_SRC_H   = $(wildcard $(PATH_SRC_XTCORE)/*.h)   $(wildcard $(PATH_SRC_XTCORE)/*/*.h)
XTCORE_SRC_HPP = $(wildcard $(PATH_SRC_XTCORE)/*.hpp) $(wildcard $(PATH_SRC_XTCORE)/*/*.hpp)
XTCORE_SRC_INL = $(wildcard $(PATH_SRC_XTCORE)/*.inl) $(wildcard $(PATH_SRC_XTCORE)/*/*.inl)
XTCORE_SRC_TML = $(wildcard $(PATH_SRC_XTCORE)/*.tml) $(wildcard $(PATH_SRC_XTCORE)/*/*.tml)
XTCORE_SRC_C   = $(wildcard $(PATH_SRC_XTCORE)/*.c)   $(wildcard $(PATH_SRC_XTCORE)/*/*.c)
XTCORE_SRC_CC  = $(wildcard $(PATH_SRC_XTCORE)/*.cc)  $(wildcard $(PATH_SRC_XTCORE)/*/*.cc)
XTCORE_SRC_CPP = $(wildcard $(PATH_SRC_XTCORE)/*.cpp) $(wildcard $(PATH_SRC_XTCORE)/*/*.cpp)
XTCORE_SRC_C11 = $(wildcard $(PATH_SRC_XTCORE)/*.c11) $(wildcard $(PATH_SRC_XTCORE)/*/*.c11)

SRC_API = $(LIB_H) $(LIB_HPP) $(LIB_INL) $(LIB_TML) \
		  $(XTCORE_SRC_H) $(XTCORE_SRC_HPP) $(XTCORE_SRC_INL) $(XTCORE_SRC_TML)

XTCORE_BINOBJ_C   = $(addprefix $(PATH_OBJ)/$(PATH_SRC_XTCORE)/, $(patsubst $(PATH_SRC_XTCORE)/%,%,$(XTCORE_SRC_C:.c=.o))) \
			   		$(addprefix $(PATH_OBJ)/$(PATH_LIB)/, $(patsubst $(PATH_LIB)/%,%,$(LIB_C:.c=.o)))
XTCORE_BINOBJ_CC  = $(addprefix $(PATH_OBJ)/$(PATH_SRC_XTCORE)/, $(patsubst $(PATH_SRC_XTCORE)/%,%,$(XTCORE_SRC_CC:.cc=.o))) \
					$(addprefix $(PATH_OBJ)/$(PATH_LIB)/, $(patsubst $(PATH_LIB)/%,%,$(LIB_CC:.cc=.o)))
XTCORE_BINOBJ_CPP = $(addprefix $(PATH_OBJ)/$(PATH_SRC_XTCORE)/, $(patsubst $(PATH_SRC_XTCORE)/%,%,$(XTCORE_SRC_CPP:.cpp=.o))) \
					$(addprefix $(PATH_OBJ)/$(PATH_LIB)/, $(patsubst $(PATH_LIB)/%,%,$(LIB_CPP:.cpp=.o)))
XTCORE_BINOBJ_C11 = $(addprefix $(PATH_OBJ)/$(PATH_SRC_XTCORE)/, $(patsubst $(PATH_SRC_XTCORE)/%,%,$(XTCORE_SRC_C11:.c11=.o))) \
					$(addprefix $(PATH_OBJ)/$(PATH_LIB)/, $(patsubst $(PATH_LIB)/%,%,$(LIB_C11:.c11=.o)))

XTCORE_BINOBJ	  = $(sort $(XTCORE_BINOBJ_C) $(XTCORE_BINOBJ_CC) $(XTCORE_BINOBJ_CPP) $(XTCORE_BINOBJ_C11))
XTCORE_BINPATHS   = $(sort $(dir $(XTCORE_BINOBJ)))

XTCORE_LIB_STATIC  = $(PATH_BIN)/$(SW_TITLE).$(EXT_STATIC)
XTCORE_LIB_DYNAMIC = $(PATH_BIN)/$(SW_TITLE).$(EXT_DYNAMIC)

FLAGS_WARNLV = -Wall
FLAGS_INCLSN = -I/usr/local/include  -I$(PATH_SRC) -I$(PATH_LIB) -I$(PATH_EXT)
FLAGS_PREPRC = -D'$(SW_SYMID)_YEAR="$(YEAR)"' -D'$(SW_SYMID)_VERSION="$(SW_VERSION)"'
FLAGS_COMMON = $(FLAGS_OPT) $(FLAGS_DBG) $(FLAGS_WARNLV) $(FLAGS_INCLSN) \
			   $(FLAGS_PREPRC) $(FLAGS_XTR) $(FLAGS_PROF) -fPIC
FLAGS_LD  = $(FLAGS_PROF) -lgomp -ldl
FLAGS_CC  = $(FLAGS_COMMON) -std=c89
FLAGS_CXX = $(FLAGS_COMMON) -ansi -pedantic
FLAGS_C11 = $(FLAGS_COMMON) -std=c++11 -pedantic -x c++

# TARGETS
all: $(XTCORE_LIB_STATIC) $(XTCORE_LIB_DYNAMIC)

.PHONY: get-version
get-version:
	@echo $(SW_VERSION)

$(PATH_OBJ)/$(PATH_SRC_XTCORE)/%.o: $(PATH_SRC_XTCORE)/%.c
	$(CC) -c $(FLAGS_CC) -o $@ $<

$(PATH_OBJ)/$(PATH_LIB)/%.o: $(PATH_LIB)/%.c
	$(CC) -c $(FLAGS_CC) -o $@ $<

$(PATH_OBJ)/$(PATH_SRC_XTCORE)/%.o: $(PATH_SRC_XTCORE)/%.cc
	$(CXX) -c $(FLAGS_CXX) -o $@ $<

$(PATH_OBJ)/$(PATH_LIB)/%.o: $(PATH_LIB)/%.cc
	$(CXX) -c $(FLAGS_CXX) -o $@ $<

$(PATH_OBJ)/$(PATH_SRC_XTCORE)/%.o: $(PATH_SRC_XTCORE)/%.cpp
	$(CXX) -c $(FLAGS_CXX) -o $@ $<

$(PATH_OBJ)/$(PATH_LIB)/%.o: $(PATH_LIB)/%.cpp
	$(CXX) -c $(FLAGS_CXX) -o $@ $<

$(PATH_OBJ)/$(PATH_SRC_XTCORE)/%.o: $(PATH_SRC_XTCORE)/%.c11
	$(C11) -c $(FLAGS_C11) -o $@ $<

.PHONY: dirtree_xtcore
dirtree_xtcore:
	$(MKDIR) $(XTCORE_BINPATHS)

$(XTCORE_LIB_STATIC): dirtree_common dirtree_xtcore $(XTCORE_BINOBJ)
	$(AR) $@ $(XTCORE_BINOBJ)

$(XTCORE_LIB_DYNAMIC): dirtree_common dirtree_xtcore $(XTCORE_BINOBJ)
	$(LD) -shared $(XTCORE_BINOBJ) $(DEP_DLIB) $(FLAGS_LD) -o $@

.PHONY: install
install: all
	install -m 755 $(BIN) $(PATH_PREFIX)/$(BIN)
	if test -f $(MAN); then install -D -c -m 444 $(MAN) $(PATH_PREFIX)/share/man/man$(MAN_SECTION)/$(SW_TITLE).$(MAN_SECTION); fi

.PHONY: uninstall
uninstall:
	rm -f $(PATH_PREFIX)/$(BIN)
	if test -f man; then rm -f $(PATH_PREFIX)/share/man/man$(MAN_SECTION)/$(SW_TITLE).$(MAN_SECTION); fi

.PHONY: clean-xtcore
clean-xtcore:
	rm -rf $(XTCORE_BINOBJ)
