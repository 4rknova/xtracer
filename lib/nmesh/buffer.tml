#ifndef BUFFER_TML_INCLUDED
#define BUFFER_TML_INCLUDED

#ifndef BUFFER_HPP_INCLUDED
	#error "buffer.hpp must be included before buffer.tml"
#endif /* BUFFER_HPP_INCLUDED */

#include <new>
#include <string.h>

namespace nmesh {

template <class T>
Buffer<T>::Buffer()
	: m_count(0)
	, m_data(NULL)
{}

template <class T>
Buffer<T>::Buffer(const Buffer &rhs)
{
	if (&rhs == this) return;

	release();

	if(init(rhs.count())) return;

	memcpy(m_data, rhs.m_data, m_count * sizeof(T));
	m_count = rhs.count();
}

template <class T>
Buffer<T> &Buffer<T>::operator =(const Buffer<T> &rhs)
{
	if (&rhs == this) return *this;

	release();

	m_data = NULL;

	if(init(rhs.count())) return *this;

	memcpy(m_data, rhs.m_data, m_count * sizeof(T));
	m_count = rhs.count();

	return *this;
}

template <class T>
Buffer<T>::~Buffer()
{
	release();
}

template <class T>
int Buffer<T>::init(const unsigned int count)
{
	// Release previously allocated memory
	release();

	if (!count)	return 0;

	// Allocate new memory
	m_data = new (std::nothrow) T[count];

	if(!m_data)	return 1; // Something went wrong.

	memset(m_data, 0, count * sizeof(T));
	m_count = count;

	return 0;
}

template <class T>
void Buffer<T>::clear()
{
	release();
}

template <class T>
void Buffer<T>::release()
{
	delete[] m_data;

	m_data = NULL;
	m_count = 0;
}

template <class T>
unsigned int Buffer<T>::count() const
{
	return m_count;
}

template <class T>
T& Buffer<T>::operator[] (const unsigned int idx)
{
	if (!count()) return m_single_object;

	return m_data[idx >= count() ? count() - 1 : idx];
}

template <class T>
const T& Buffer<T>::operator[] (const unsigned int idx) const
{
	if (!count()) return m_single_object;

	return m_data[idx >= count() ? count() - 1 : idx];
}

} /* namespace nmesh */

#endif /* BUFFER_TML_INCLUDED */
