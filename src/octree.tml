#ifndef NMESH_OCTREE_TML_INCLUDED
#define NMESH_OCTREE_TML_INCLUDED

#ifndef XTRACER_OCTREE_HPP_INCLUDED
	#error "octree.hpp must be included before octree.tml"
#endif /* XTRACER_OCTREE_HPP_INCLUDED */

#endif /* NMESH_OCTREE_TML_INCLUDED */

#include <cfloat>
#include <cstring>
#include <new>

#include <nmath/vector.h>

using NMath::Vector3f;

/* OctreeNode */
template <typename T>
OctreeNode<T>::OctreeNode()
{
	memset(child, 0, 8 * sizeof(OctreeNode<T> *));
}

template <typename T>
unsigned int OctreeNode<T>::count_items()
{
	return (unsigned int)(items.size());
}

/* Octree */
template <typename T>
Octree<T>::Octree()
	: m_root(NULL),
	  m_max_items_per_node(10),
	  m_max_depth(11)
{
	clear();
}

template <typename T>
Octree<T>::~Octree()
{
	clear();
}

template <typename T>
void Octree<T>::max_items_per_node(unsigned int count)
{
	m_max_items_per_node = (count > 0 ? count : 1);
}

template <typename T>
void Octree<T>::max_depth(unsigned int depth)
{
	m_max_depth = (depth > 0 ? depth : 1);
}

template <typename T>
unsigned int Octree<T>::max_items_per_node()
{
	return m_max_items_per_node;
}

template <typename T>
unsigned int Octree<T>::max_depth()
{
	return m_max_depth;
}

template <typename T>
void Octree<T>::release(OctreeNode<T> *node)
{
	if (!node) {
		return;
	}

	for (unsigned int i = 0; i < 8; ++i) {
		release(node->child[i]);
	}

	node->items.clear();
	delete node;
}

template <typename T>
void Octree<T>::clear()
{
	release(m_root);

	m_items.clear();
	m_root = NULL;
	m_aabb.max = Vector3f(0, 0, 0);
	m_aabb.min = Vector3f(0, 0, 0);
}

template <typename T>
void Octree<T>::add(const BoundingBox3 &aabb, const T &data)
{
	// Create the item.
	OctreeItem<T> item;
	item.data = data;
	item.aabb = aabb;

	// Push it to the list.
	m_items.push_back(item);

	// Adjust the global bounding box.
	m_aabb.augment(aabb);
}

template <typename T>
void Octree<T>::build()
{
	release(m_root);

	m_root = new (std::nothrow) OctreeNode<T>;

	m_root->aabb = m_aabb;
	
	// The root node references all the items.
	for (unsigned int i = 0; i < (unsigned int)m_items.size(); ++i) {
		m_root->items.push_back(&m_items[i]);
	}
	
	// Subdivide the tree.
	if (m_root->count_items() > m_max_items_per_node) {
		subdivide(m_root, 0);
	}
}

template <typename T>
void Octree<T>::subdivide(OctreeNode<T> *node, unsigned int level)
{
	// Check if either of the limits is met.
	if (node->count_items() <= m_max_items_per_node || level >= m_max_depth) {
		return;
	}

	BoundingBox3 n_aabb = node->aabb;

	BoundingBox3 c_aabb[8];

	Vector3f center = n_aabb.center();

	c_aabb[0] = BoundingBox3(n_aabb.min, center);
	
	c_aabb[1] = BoundingBox3(Vector3f(center.x, n_aabb.min.y, n_aabb.min.z), 
							   Vector3f(n_aabb.max.x, center.y, center.z));
	c_aabb[2] = BoundingBox3(Vector3f(center.x, center.y, n_aabb.min.z),
							   Vector3f(n_aabb.max.x, n_aabb.max.y, center.z));
	c_aabb[3] = BoundingBox3(Vector3f(n_aabb.min.x, center.y, n_aabb.min.z),
							   Vector3f(center.x, n_aabb.max.y, center.z));
	c_aabb[4] = BoundingBox3(Vector3f(n_aabb.min.x, n_aabb.min.y, center.z),
							   Vector3f(center.x, center.y, n_aabb.max.z));
	c_aabb[5] = BoundingBox3(Vector3f(center.x, n_aabb.min.y, center.z),
							   Vector3f(n_aabb.max.x, center.y, n_aabb.max.z));
	c_aabb[6] = BoundingBox3(center, n_aabb.max);

	c_aabb[7] = BoundingBox3(Vector3f(n_aabb.min.x, center.y, center.z),
							   Vector3f(center.x, n_aabb.max.y, m_aabb.max.z));

	for (unsigned int i = 0; i < 8; ++i) {
			OctreeNode<T> *c = new (std::nothrow) OctreeNode<T>;

			node->child[i] = c;
			
			c->aabb = c_aabb[i];

			typename std::list<OctreeItem<T>* >::iterator iter = node->items.begin();

			while (iter != node->items.end()) {
				if (c->aabb.contains((*iter)->aabb)) {
					c->items.push_back(*iter);
				}
				++iter;
			}

			subdivide(c, level + 1);
	}

	node->items.clear();
}

template <typename T>
OctreeItem<T> *Octree<T>::intersection(const Ray &ray, IntInfo *point) const
{
	return r_intersection(m_root, ray, point);
}

template <typename T>
OctreeItem<T> *Octree<T>::r_intersection(OctreeNode<T> *node, const Ray &ray, IntInfo *point) const
{
	if (!node || !node->aabb.intersection(ray)) {
		return NULL;
	}
	
	IntInfo pt0;
	pt0.t = FLT_MAX;

	OctreeItem<T> *closest = NULL;

	if (node->count_items()) {
		typename std::list<OctreeItem<T>*>::iterator iter = node->items.begin();
		while (iter != node->items.end()) {
			IntInfo pt;

			if (((*iter)->data.intersection(ray, &pt)) && pt.t < pt0.t) {
				pt0 = pt;
				closest = *iter;
			}
			iter++;
		}
	}
	else {
		for (unsigned int i = 0; i < 8; ++i) {
			IntInfo pt;
			OctreeItem<T> *item;

			if ((item = r_intersection(node->child[i], ray, &pt)) && pt.t < pt0.t) {
				pt0 = pt;
				closest = item;
			}
		}
	}

	if (closest && point) {
		*point = pt0;
	}
	
	return closest;
}

