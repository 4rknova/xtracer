# Xtracer 2
#
# This scene describes the standard "Cornell Box" with some caveats.
# These caveats will be raised as the development of the raytracer progresses.
#
# Caveats:
#
# 	- 	The light's color intensity is defined in arbitrary RGB units rather than
# 		the physically measucol1 spectrum described on the Cornell Box page.
#		(http://www.graphics.cornell.edu/online/box/data.html)
#
#	-	Materials are defined with RGB approximations to their spectral
#		reflectance, not the 4 nm sampled spectra on the web page.
#
#	-	The walls are defined as ( clockwise ) triangles instead of quads
#
# Notes:
#
#	-	The original Cornell box is rendecol1 with an aspect ratio of 1:1.
#	-	The final image appears flipped to the yy' axis. This is due to the
#		different coordinate system used in the original data.

data = ./data

title = Cornell box replica (based on the original radiosity dataset)
descr = <name>. You will normally want to render this scene with a 1:1 aspect ratio.
versn = 0.2

k_ambient = 0.01

ambient = {
	r = 0.6
	g = 0.6
	b = 0.6
}

light_x = 340
light_y = 340
light_z = -200


# The scene cameras.
camera = {

	# The default camera.
	default = front

	# The front camera.
	front = {
		# Field of view.
		fov = 38.39

		# Camera position.
		position = {
			x = 278.0
			y = 273.0
			z = -800.0
		#	z = 510
		}

		# Target.
		# This is equal to the direction (0, 1, 0)
		# as defined in the original data.
		target = {
			x = 278.0
			y = 273.0
			z = -799.0
		}

		# Up vector.
		up = {
			x = 0
			y = 1
			z = 0
		}
	}
}

# The scene lights
light = {

	light1 = {
		type = sphere

		radius = 10

		position = {
			x = <light_x>
			y = <light_y>
			z = <light_z>
		}

		intensity = {
			r = 1
			g = 1
			b = 1
		}
	}
}

# The scene materials
material = {

	# The following three colors are RGB approximations to the spectral
	# measurements of the white, col1, and col2 paints used in the Cornell Box.
	white = {
		type = lambert

		diffuse = {
			r = 0.5
			g = 0.5
			b = 0.5
		}
	}

	col1 = {
		type = lambert

		diffuse = {
			r = 0.33
			g = 0.46
			b = 1.00
		}
	}

	col2 = {
		type = lambert

		diffuse = {
			r = 0.74
			g = 0.94
			b = 0.09
		}
	}

	model = {
		type = lambert

		diffuse = {
			r = 1.0
			g = 0.87843137254
			b = 0.74117647058
		}
    }
}

texture = {
    model = {
        source = <data>/obj/map/LaikenTorsoA.ppm
    }
}

# The scene geometry
geometry = {

	# The room box
	# - The light
	# The light geometry is lowecol1 by a small number to avoid numeric errors
	# The original height is 548.8
	light_1 = {
		type = triangle

		vecdata = {
			v0 = {
				x = 343.0
				y = 548.7999
				z = 227.0
			}

			v1 = {
				x = 343.0
				y = 548.7999
				z = 332.0
			}

			v2 = {
				x = 213.0
				y = 548.7999
				z = 332.0
			}

		}
	}

	light_2 = {
		type = triangle

		vecdata = {
			v0 = {
				x = 343.0
				y = 548.7999
				z = 227.0
			}

			v1 = {
				x = 213.0
				y = 548.7999
				z = 332.0
			}

			v2 = {
				x = 213.0
				y = 548.7999
				z = 227.0
			}
		}
	}

	# - Floor
	floor_1 = {
		type = triangle

		vecdata = {
			v0 = {
				x = 552.8
				y = 0.0
				z = 0.0
			}

			v1 = {
				x = 0.0
				y = 0.0
				z = 0.0
			}

			v2 = {
				x = 0.0
				y = 0.0
				z = 559.2
			}
		}
	}

	floor_2 = {
		type = triangle
		vecdata = {
			v0 = {
				x = 552.8
				y = 0.0
				z = 0.0
			}

			v1 = {
				x = 0.0
				y = 0.0
				z = 559.2
			}

			v2 = {
				x = 549.6
				y = 0.0
				z = 559.2
			}

		}
	}

	# - Ceiling
	ceiling_1 = {
		type = triangle
		vecdata = {
			v0 = {
				x = 556.0
				y = 548.8
				z = 0.0
			}

			v1 = {
				x = 556.0
				y = 548.8
				z = 559.2
			}

			v2 = {
				x = 0.0
				y = 548.8
				z = 559.2
			}
		}
	}

	ceiling_2 = {
		type = triangle

		vecdata = {
			v0 = {
				x = 556.0
				y = 548.8
				z = 0.0
			}

			v1 = {
				x = 0.0
				y = 548.8
				z = 559.2
			}

			v2 = {
				x = 0.0
				y = 548.8
				z = 0.0
			}
		}
	}


	# - Back wall
	back_wall_1 = {
		type = triangle
		vecdata = {
			v0 = {
				x = 549.6
				y = 0.0
				z = 559.2
			}

			v1 = {
				x = 0.0
				y = 0.0
				z = 559.2
			}

			v2 = {
				x = 0.0
				y = 548.8
				z = 559.2
			}
		}
	}

	back_wall_2 = {
		type = triangle
		vecdata = {
			v0 = {
				x = 549.6
				y = 0.0
				z = 559.2
			}

			v1 = {
				x = 0.0
				y = 548.8
				z = 559.2
			}

			v2 = {
				x = 556.0
				y = 548.8
				z = 559.2
			}
		}
	}

	# - Left wall
	left_wall_1 = {
		type = triangle
		vecdata = {
			v0 = {
				x = 552.8
				y = 0.0
				z = 0.0
			}

			v1 = {
				x = 549.6
				y = 0.0
				z = 559.2
			}

			v2 = {
				x = 556.0
				y = 548.8
				z = 559.2
			}
		}
	}

	left_wall_2 = {
		type = triangle
		vecdata = {
			v0 = {
				x = 552.8
				y = 0.0
				z = 0.0
			}
			v1 = {
				x = 556.0
				y = 548.8
				z = 559.2
			}
			v2 = {
				x = 556.0
				y = 548.8
				z = 0.0
			}
		}
	}

	# - Right wall
	right_wall_1 = {
		type = triangle
		vecdata = {
			v0 = {
				x = 0.0
				y = 0.0
				z = 559.2
			}

			v1 = {
				x = 0.0
				y = 0.0
				z = 0.0
			}

			v2 = {
				x = 0.0
				y = 548.8
				z = 0.0
			}
		}
	}

	right_wall_2 = {
		type = triangle
		vecdata = {
			v0 = {
				x = 0.0
				y = 0.0
				z = 559.2
			}

			v1 = {
				x = 0.0
				y = 548.8
				z = 0.0
			}

			v2 = {
				x = 0.0
				y = 548.8
				z = 559.2
			}
		}
	}

	model = {
		type = mesh
		source = <data>/obj/sexy-girl-092-001.obj

        rotation = {
            y = 3.14159
            z = 0.15159
        }

        translation = {
            x = 425
            z = 200
            y = -65
        }

        scale = {
            x = 25.
            y = 25.
            z = 25.
        }
	}
}

# The scene objects
object = {
	# Light
	light_1 = {
		geometry = light_1
		material = light
	}

	light_2 = {
		geometry = light_2
		material = light
	}

	# Floor
	floor_1 = {
		geometry = floor_1
		material = white
	}

	floor_2 = {
		geometry = floor_2
		material = white
	}

	# Ceiling
	ceiling_1 = {
		geometry = ceiling_1
		material = white
	}

	ceiling_2 = {
		geometry = ceiling_2
		material = white
	}

	# Back wall
	back_wall_1 = {
		geometry = back_wall_1
		material = white
	}

	back_wall_2 = {
		geometry = back_wall_2
		material = white
	}

	# Left wall
	left_wall_1 = {
		geometry = left_wall_1
		material = col1
	}

	left_wall_2 = {
		geometry = left_wall_2
		material = col1
	}

	# Right wall
	right_wall_1 = {
		geometry = right_wall_1
		material = col2
	}

	right_wall_2 = {
		geometry = right_wall_2
		material = col2
	}

	model = {
		geometry = model
		material = model
        texture  = model
	}
}
